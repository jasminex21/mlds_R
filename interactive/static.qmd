---
title: "Workshop: Intro to R and Data Viz. in R [Static]"
author: Jasmine Xu
date: Oct. 1, 2024
---

## Overview

<p align="center">
  <img src="mlds_logo.png" width="200"/>
</p>

Welcome! Today, we will explore the basics of R programming and dive into data visualization using ggplot2, one of the most popular packages for creating graphics in R.

R is widely used for data analysis and visualization in various fields, including academia, industry, and research. Its applications range from simple data manipulation to complex statistical modeling and machine learning.

## Basics

### Assignment

The assignment operator in R is `<-`. You can also use the equals sign `=`. 

``` {r}
var1 <- "My first variable!"
# print the variable
var1
```

``` {r}
var2 = "My second variable!"
var2
```

### Data Types

* Character: Used for text data, enclosed within either single or double quotation marks, e.g. "Hello", "40 Acres"

* Numeric: integers and floats. e.g. `12`, `3.14`, `-7`.
* Logical: Consists of boolean values `TRUE` and `FALSE`.
* Vectors: A sequence of elements of the same data type.
    * Use `c()` to concatenate items into a vector.
        * Numeric vector: `c(1, 2, 3, 4, 5)`
        * Character vector: `c("apple", "banana", "orange")`
        * Logical vector: `c(TRUE, FALSE, TRUE)`

``` {r}
vec1 = c(1, 3, 5, 8, 12)
print(vec1)

# you can also assign a series of numbers to a vector
vec2 = 1:10
print(vec2)
```  

``` {r}

# access elements in vectors with square brackets
# note: indexing in R starts at 1, not 0!
print(vec1[3])
```

Try to name your variables appropriately! Ensure that your variable names: 

1. follow R rules - variable names must be a combination of letters, digits, underscores, or periods, and *CANNOT*:
     * be a reserved word, e.g. `TRUE` or `for`
     * start with an underscore
     * start with a number
     * contain dashes (-) or spaces
     * contain special characters such as `"@"`
2. are descriptive - e.g. if you are computing the average of a vector of numbers, `average` is a better variable name that `number`
3. follow either snake_case or camelCase conventions
4. are an appropriate length - e.g. `the_average_of_this_vector_of_numbers` is probably not necessary; just `average` suffices

Also remember that variable names are case-sensitive! This means that `variable` and `Variable` are *not* the same, and neither are `vaRIAbLe` and `vaRiablE`. 

### Math

| Operator      | Name           | Example  |
| :-------------: |:-------------| -----|
| +      | Addition | x + y |
| -     | Subtraction      |   x - y |
| * | Multiplication      |    x * y |
| / | Division      |    x / y |
| ^ | Exponent      |    x ^ y |
| %% | Modulus (remainder from division)     |    x %% y |
| % / % | Integer division      |    x% / %y |

Some example calculations: 

``` {r}
print(5 * 7 + 9)
# note that multiplication is done before addition
print(7 + 9 * 5)
# use parentheses as needed
print(5 * (7 + 9))
```

Other useful functions for computations include `log()` for logarithms and `sqrt()` for square roots.

Base R also comes with several useful functions for statistical analyses, including `mean()`, `median()`, and `sd()`.

``` {r}
vec1 = c(1, 3, 5, 8, 12)

# mean
print(mean(vec1))
# median
print(median(vec1))
# standard deviation
print(sd(vec1))
```

In some cases, you may need to deal with `NA` values, which indicate missing data. 

What happens when you run the following? What happens when you uncomment and re-run lines 5, 8, and 11?

``` {r}
vec_na = c(1, 3, 5, NA, 12)

# mean
print(mean(vec_na))
print(mean(vec_na, na.rm=TRUE))
# median
print(median(vec_na))
print(median(vec_na, na.rm=TRUE))
# standard deviation
print(sd(vec_na))
print(sd(vec_na, na.rm=TRUE))
```

## Data Visualization

Let's start playing with real data! We will be using the `iris` dataset, which is built into R. 

The dataset contains 150 observations of iris flowers, each belonging to one of three species: *setosa*, *versicolor*, or *virginica*. 

::: {.callout-tip appearance="simple"}
## Tip
Because the `iris` dataset is already in R, we don't need to load it in. If, however, you have a dataset stored locally in a CSV file, you can use `data = read.csv("path_to_dataset.csv")` to read in your data.  
:::

Once a dataset is loaded into your R session, it is stored in a **dataframe**.

We can take a brief look at the first few rows of the dataset using `head()`: 

``` {r}
head(iris)
```

``` {r}
# `paste0` combines outputs
print(paste0("Number of rows: ", nrow(iris)))
print(paste0("Number of columns: ", ncol(iris)))
# column names
print(names(iris))
```

And you can also get some summary statistics about the dataset using the `summary()` function. Notice the difference in summary statistics between the numeric and categorical variables!

``` {r}
summary(iris)
```

Specific columns in a dataframe are accessed using the `$` symbol in R. 

``` {r}
# printing the first 15 values in the Sepal.Length column
print(iris$Sepal.Length[1:15])
```

### Base R

One of R's greatest advantages is its support for data visualization. 

We'll start with plotting in base R - the default plotting options built into R - and then we'll move on to plotting with `ggplot`, the R package that allows users to create and customize prettier graphics.

Plotting functions provided by base R include `barplot()` for barcharts, `hist()` for histograms, `plot()` for scatterplots, `boxplot()` for boxplots, and so on.

``` {r}
# histogram example
hist(x = iris$Sepal.Width, # data to plot on the x axis
     main = "Histogram of Iris Sepal Widths", # plot title
     xlab = "Sepal Width (cm)") # x axis title
```

``` {r}
# scatterplot example
plot(x = iris$Sepal.Width, # data to plot on the x axis
     y = iris$Sepal.Length, # data to plot on the y axis
     main = "Histogram of Iris Sepal Widths", # plot title
     xlab = "Sepal Width (cm)", # x axis title
     ylab = "Sepal Length (cm)") # y axis title
```

While plotting in base R is fast and convenient, it is not the most visually appealing.

### ggplot

`ggplot` is a data visualization package in R that provides a flexible and intuitive framework for creating graphics.

::: {.callout-tip appearance="simple"}
## Tip
Because `ggplot` is not included in base R and is a separate package, it needs to be installed. In R, external packages are installed using `install.packages("package_name")`.
:::

For simplicity, all required packages for this demo have been pre-installed, so you simply need to load them into the session using `library("package_name")`.

``` {r}
library(ggplot2)
print("ggplot loaded!")
```

Plotting in `ggplot` follows a consistent template: you first supply the ggplot() function, in which you specify the dataset you will be using, as well as an aesthetic mapping using aes(). Then, you simply add layers onto the ggplot (using `+`). 

Supported plots include histogams, boxplots, scatterplots, violin plots, density plots, and [tons more](https://ggplot2.tidyverse.org/reference/).

``` {r}
ggplot(iris, aes(x = Sepal.Width)) + # specifying dataset and aesthetic mapping
  geom_histogram(bins = 12) + # adding a histogram layer
  labs(title = "Histogram of Iris Sepal Widths", # adding a layer with title and axis labels
       x = "Sepal Width (cm)")
```

``` {r}
ggplot(iris, aes(x = Sepal.Width, 
                 y = Sepal.Length)) +
  geom_point() + # adding a scatterplot layer
  labs(title = "Scatterplot of Sepal Length vs Width", 
       x = "Sepal Width (cm)",
       y = "Sepal Length (cm)")
```

Let's further customize our ggplots. 

#### Grouping

We can group our histogram by species - the legend is automatically added! 

``` {r}
ggplot(iris, 
       aes(x = Sepal.Width, fill = Species)) + 
  geom_histogram(bins = 12,
                 # alpha controls transparency
                 alpha = 0.8) + 
  labs(title = "Histogram of Sepal Widths", 
       x = "Sepal Width (cm)", 
       y = "Frequency") + 
  # you can specify your own colors for each group
  scale_fill_manual(values = c("darkgreen", 
                               "forestgreen", 
                               "darkolivegreen"))
```

The same grouping can be done for scatterplots - you can even change the shapes of groups (uncomment line 4).

``` {r}
ggplot(iris, 
       aes(x = Sepal.Width, 
           y = Sepal.Length, 
           color = Species)) + 
  geom_point() + 
  labs(title = "Sepal Lengths vs Sepal Widths", 
       x = "Sepal Width", 
       y = "Sepal Length") +
  scale_color_manual(values = c("darkgreen", 
                               "forestgreen", 
                               "darkolivegreen"))
```

Instead of overlaying groups on top of each other, we can also use **facet_wrapping**.

``` {r}
ggplot(iris, 
       aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + 
  geom_point() + 
  labs(title = "Sepal Lengths vs Sepal Widths", 
       x = "Sepal Width", 
       y = "Sepal Length") +
  # wrap by Species
  facet_wrap(~Species)
```

#### Other ways to customize your ggplot

You can alter the "theme" of your ggplot by adding `theme_*()` as a layer. Try changing `theme_gray()` (the default) in line 7 to one of `theme_bw()`, `theme_dark()`, `theme_minimal()`, or `theme_classic()`. 

Also try changing the value of the `shape` parameter in `geom_point()` in line 3. It can be any integer ranging from 0 to 25 (see shape options [here](http://www.sthda.com/sthda/RDoc/images/points-symbols.png)). 

``` {r}
ggplot(iris, aes(x = Sepal.Width, 
                 y = Sepal.Length)) +
  geom_point(shape=20) + 
  labs(title = "Scatterplot of Sepal Length vs Width", 
       x = "Sepal Width (cm)",
       y = "Sepal Length (cm)") + 
  theme_gray()
```

You can add labels to your plots using `geom_label()`.

``` {r}
ggplot(iris, aes(x = Sepal.Width, 
                 y = Sepal.Length)) +
  geom_point() + # adding a scatterplot layer
  labs(title = "Scatterplot of Sepal Length vs Width", 
       x = "Sepal Width (cm)",
       y = "Sepal Length (cm)") + 
  geom_label(label = "Look at this!", 
             x = 4.0,
             y = 6.5,
             color = "black",
             fill = "#69b3a2"
  )
```

You can use point sizes in scatterplots to represent the magnitude of a variable. To do this, simply specify the `size` parameter in the aesthetic mapping.

Notice how the below plot incorporates *four* variables!

``` {r}
ggplot(iris, aes(x = Sepal.Width, 
                 y = Sepal.Length,
                 size = Petal.Width,
                 color = Species)) +
  geom_point(alpha = 0.6) + 
  labs(title = "Scatterplot of Sepal Length vs Width", 
       x = "Sepal Width (cm)",
       y = "Sepal Length (cm)") + 
  theme_gray()
```