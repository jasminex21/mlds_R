[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Overview",
    "text": "Overview\n\n\n\nWelcome! Today, we will explore the basics of R programming and dive into data visualization using ggplot2, one of the most popular packages for creating graphics in R.\nR is widely used for data analysis and visualization in various fields, including academia, industry, and research. Its applications range from simple data manipulation to complex statistical modeling and machine learning."
  },
  {
    "objectID": "index.html#basics",
    "href": "index.html#basics",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Basics",
    "text": "Basics\n\nAssignment\nThe assignment operator in R is &lt;-. You can also use the equals sign =.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Types\n\nCharacter: Used for text data, enclosed within either single or double quotation marks, e.g. “Hello”, “40 Acres’\nNumeric: integers and floats. e.g. 12, 3.14, -7.\nLogical: Consists of boolean values TRUE and FALSE.\nVectors: A sequence of elements of the same data type.\n\nUse c() to concatenate items into a vector.\n\nNumeric vector: c(1, 2, 3, 4, 5)\nCharacter vector: c(\"apple\", \"banana\", \"orange\")\nLogical vector: c(TRUE, FALSE, TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMath\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (remainder from division)\nx %% y\n\n\n% / %\nInteger division\nx% / %y\n\n\n\nSome example calculations:\n\n\n\n\n\n\n\n\nOther useful functions for computations include log() for logarithms and sqrt() for square roots.\nBase R also comes with several useful functions for statistical analyses, including mean(), median(), and sd().\n\n\n\n\n\n\n\n\nIn some cases, you may need to deal with NA values, which indicate missing data.\nWhat happens when you run the following? What happens when you uncomment and re-run lines 5, 8, and 11?"
  },
  {
    "objectID": "index.html#data-visualization",
    "href": "index.html#data-visualization",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Data Visualization",
    "text": "Data Visualization\nLet’s start playing with real data! We will be using the iris dataset, which is built into R.\nThe dataset contains 150 observations of iris flowers, each belonging to one of three species: setosa, versicolor, or virginica.\n\n\n\n\n\n\nTip\n\n\n\nBecause the iris dataset is already in R, we don’t need to load it in. If, however, you have a dataset stored locally in a CSV file, you can use data = read.csv(\"path_to_dataset.csv\") to read in your data.\n\n\nOnce a dataset is loaded into your R session, it is stored in a dataframe.\nWe can take a brief look at the first few rows of the dataset using head():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd you can also get some summary statistics about the dataset using the summary() function. Notice the difference in summary statistics between the numeric and categorical variables!\n\n\n\n\n\n\n\n\nSpecific columns in a dataframe are accessed using the $ symbol in R.\n\n\n\n\n\n\n\n\n\nBase R\nOne of R’s greatest advantages is its support for data visualization.\nWe’ll start with plotting in base R - the default plotting options built into R - and then we’ll move on to plotting with ggplot, the R package that allows users to create and customize prettier graphics.\nPlotting functions provided by base R include barplot() for barcharts, hist() for histograms, plot() for scatterplots, boxplot() for boxplots, and so on.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhile plotting in base R is fast and convenient, it is not the most visually appealing.\n\n\nggplot\nggplot is a data visualization package in R that provides a flexible and intuitive framework for creating graphics.\n\n\n\n\n\n\nTip\n\n\n\nBecause ggplot is not included in base R and is a separate package, it needs to be installed. In R, external packages are installed using install.packages(\"package_name\").\n\n\nFor simplicity, all required packages for this demo have been pre-installed, so you simply need to load them into the session using library(\"package_name\").\n\n\n\n\n\n\n\n\nPlotting in ggplot follows a consistent template: you first supply the ggplot() function, in which you specify the dataset you will be using, as well as an aesthetic mapping using aes(). Then, you simply add layers onto the ggplot (using +).\nSupported plots include histogams, boxplots, scatterplots, violin plots, density plots, and tons more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it yourself - create a ggplot scatterplot with Petal.Width on the x axis, and Petal.Length on the y axis. Double click on each blank and fill them in.\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +\n  geom_point() + \n  labs(title = \"Histogram of Petal Lengths vs Widths\", \n       x = \"Petal Width (cm)\",\n       y = \"Petal Length (cm)\")\nggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +\n  geom_point() + \n  labs(title = \"Histogram of Petal Lengths vs Widths\", \n       x = \"Petal Width (cm)\",\n       y = \"Petal Length (cm)\")\n\n\n\n\n\n\nLet’s further customize our ggplots.\n\nGrouping\nWe can group our histogram by species - the legend is automatically added!\n\n\n\n\n\n\n\n\nThe same grouping can be done for scatterplots - you can even change the shapes of groups (uncomment line 4).\n\n\n\n\n\n\n\n\nInstead of overlaying groups on top of each other, we can also use facet_wrapping.\n\n\n\n\n\n\n\n\n\n\nOther ways to customize your ggplot\nYou can alter the “theme” of your ggplot by adding theme_*() as a layer. Try changing theme_gray() (the default) in line 7 to one of theme_bw(), theme_dark(), theme_minimal(), or theme_classic().\nAlso try changing the value of the shape parameter in geom_point() in line 3. It can be any integer ranging from 0 to 25 (see shape options here).\n\n\n\n\n\n\n\n\nYou can add labels to your plots using geom_label().\n\n\n\n\n\n\n\n\nYou can use point sizes in scatterplots to represent the magnitude of a variable. To do this, simply specify the size parameter in the aesthetic mapping.\nNotice how the below plot incorporates four variables!"
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Exercises",
    "text": "Exercises\nThese below exercises are based on the penguins dataset from the palmerpenguins package. Run the below to load in the dataset.\n\n\n\n\n\n\n\n\nPreview the dataset with head():\n\n\n\n\n\n\n\n\nMore details about the dataset:\n\n\n\n\n\n\n\n\nExercise 1: Choose one numeric variable in the penguins dataset, and create a histogram. Don’t worry about any R warnings for now!\nDouble click on each blank and type your answer.\n\n\n\n\n\n\n\n\nExercise 2: Choose 2 numeric variables in the penguins dataset, and create a scatterplot. Don’t worry about any R warnings for now!\n\n\n\n\n\n\n\n\nExercise 3: Copy and paste your code from exercise 2 in the code cell below. This time, color the data points by the species variable."
  },
  {
    "objectID": "static.html",
    "href": "static.html",
    "title": "Workshop: Intro to R and Data Viz. in R [Static]",
    "section": "",
    "text": "Welcome! Today, we will explore the basics of R programming and dive into data visualization using ggplot2, one of the most popular packages for creating graphics in R.\nR is widely used for data analysis and visualization in various fields, including academia, industry, and research. Its applications range from simple data manipulation to complex statistical modeling and machine learning."
  },
  {
    "objectID": "static.html#overview",
    "href": "static.html#overview",
    "title": "Workshop: Intro to R and Data Viz. in R [Static]",
    "section": "",
    "text": "Welcome! Today, we will explore the basics of R programming and dive into data visualization using ggplot2, one of the most popular packages for creating graphics in R.\nR is widely used for data analysis and visualization in various fields, including academia, industry, and research. Its applications range from simple data manipulation to complex statistical modeling and machine learning."
  },
  {
    "objectID": "static.html#basics",
    "href": "static.html#basics",
    "title": "Workshop: Intro to R and Data Viz. in R [Static]",
    "section": "Basics",
    "text": "Basics\n\nAssignment\nThe assignment operator in R is &lt;-. You can also use the equals sign =.\n\nvar1 &lt;- \"My first variable!\"\n# print the variable\nvar1\n\n[1] \"My first variable!\"\n\n\n\nvar2 = \"My second variable!\"\nvar2\n\n[1] \"My second variable!\"\n\n\n\n\nData Types\n\nCharacter: Used for text data, enclosed within either single or double quotation marks, e.g. “Hello”, “40 Acres’\nNumeric: integers and floats. e.g. 12, 3.14, -7.\nLogical: Consists of boolean values TRUE and FALSE.\nVectors: A sequence of elements of the same data type.\n\nUse c() to concatenate items into a vector.\n\nNumeric vector: c(1, 2, 3, 4, 5)\nCharacter vector: c(\"apple\", \"banana\", \"orange\")\nLogical vector: c(TRUE, FALSE, TRUE)\n\n\n\n\nvec1 = c(1, 3, 5, 8, 12)\nprint(vec1)\n\n[1]  1  3  5  8 12\n\n# you can also assign a series of numbers to a vector\nvec2 = 1:10\nprint(vec2)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n# access elements in vectors with square brackets\n# note: indexing in R starts at 1, not 0!\nprint(vec1[3])\n\n[1] 5\n\n\n\n\nMath\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (remainder from division)\nx %% y\n\n\n% / %\nInteger division\nx% / %y\n\n\n\nSome example calculations:\n\nprint(5 * 7 + 9)\n\n[1] 44\n\n# note that multiplication is done before addition\nprint(7 + 9 * 5)\n\n[1] 52\n\n# use parentheses as needed\nprint(5 * (7 + 9))\n\n[1] 80\n\n\nOther useful functions for computations include log() for logarithms and sqrt() for square roots.\nBase R also comes with several useful functions for statistical analyses, including mean(), median(), and sd().\n\nvec1 = c(1, 3, 5, 8, 12)\n\n# mean\nprint(mean(vec1))\n\n[1] 5.8\n\n# median\nprint(median(vec1))\n\n[1] 5\n\n# standard deviation\nprint(sd(vec1))\n\n[1] 4.32435\n\n\nIn some cases, you may need to deal with NA values, which indicate missing data.\nWhat happens when you run the following? What happens when you uncomment and re-run lines 5, 8, and 11?\n\nvec_na = c(1, 3, 5, NA, 12)\n\n# mean\nprint(mean(vec_na))\n\n[1] NA\n\nprint(mean(vec_na, na.rm=TRUE))\n\n[1] 5.25\n\n# median\nprint(median(vec_na))\n\n[1] NA\n\nprint(median(vec_na, na.rm=TRUE))\n\n[1] 4\n\n# standard deviation\nprint(sd(vec_na))\n\n[1] NA\n\nprint(sd(vec_na, na.rm=TRUE))\n\n[1] 4.787136"
  },
  {
    "objectID": "static.html#data-visualization",
    "href": "static.html#data-visualization",
    "title": "Workshop: Intro to R and Data Viz. in R [Static]",
    "section": "Data Visualization",
    "text": "Data Visualization\nLet’s start playing with real data! We will be using the iris dataset, which is built into R.\nThe dataset contains 150 observations of iris flowers, each belonging to one of three species: setosa, versicolor, or virginica.\n\n\n\n\n\n\nTip\n\n\n\nBecause the iris dataset is already in R, we don’t need to load it in. If, however, you have a dataset stored locally in a CSV file, you can use data = read.csv(\"path_to_dataset.csv\") to read in your data.\n\n\nOnce a dataset is loaded into your R session, it is stored in a dataframe.\nWe can take a brief look at the first few rows of the dataset using head():\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n# `paste0` combines outputs\nprint(paste0(\"Number of rows: \", nrow(iris)))\n\n[1] \"Number of rows: 150\"\n\nprint(paste0(\"Number of columns: \", ncol(iris)))\n\n[1] \"Number of columns: 5\"\n\n# column names\nprint(names(iris))\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n\nAnd you can also get some summary statistics about the dataset using the summary() function. Notice the difference in summary statistics between the numeric and categorical variables!\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nSpecific columns in a dataframe are accessed using the $ symbol in R.\n\n# printing the first 15 values in the Sepal.Length column\nprint(iris$Sepal.Length[1:15])\n\n [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8\n\n\n\nBase R\nOne of R’s greatest advantages is its support for data visualization.\nWe’ll start with plotting in base R - the default plotting options built into R - and then we’ll move on to plotting with ggplot, the R package that allows users to create and customize prettier graphics.\nPlotting functions provided by base R include barplot() for barcharts, hist() for histograms, plot() for scatterplots, boxplot() for boxplots, and so on.\n\n# histogram example\nhist(x = iris$Sepal.Width, # data to plot on the x axis\n     main = \"Histogram of Iris Sepal Widths\", # plot title\n     xlab = \"Sepal Width (cm)\") # x axis title\n\n\n\n\n\n\n\n\n\n# scatterplot example\nplot(x = iris$Sepal.Width, # data to plot on the x axis\n     y = iris$Sepal.Length, # data to plot on the y axis\n     main = \"Histogram of Iris Sepal Widths\", # plot title\n     xlab = \"Sepal Width (cm)\", # x axis title\n     ylab = \"Sepal Length (cm)\") # y axis title\n\n\n\n\n\n\n\n\nWhile plotting in base R is fast and convenient, it is not the most visually appealing.\n\n\nggplot\nggplot is a data visualization package in R that provides a flexible and intuitive framework for creating graphics.\n\n\n\n\n\n\nTip\n\n\n\nBecause ggplot is not included in base R and is a separate package, it needs to be installed. In R, external packages are installed using install.packages(\"package_name\").\n\n\nFor simplicity, all required packages for this demo have been pre-installed, so you simply need to load them into the session using library(\"package_name\").\n\nlibrary(ggplot2)\nprint(\"ggplot loaded!\")\n\n[1] \"ggplot loaded!\"\n\n\nPlotting in ggplot follows a consistent template: you first supply the ggplot() function, in which you specify the dataset you will be using, as well as an aesthetic mapping using aes(). Then, you simply add layers onto the ggplot (using +).\nSupported plots include histogams, boxplots, scatterplots, violin plots, density plots, and tons more.\n\nggplot(iris, aes(x = Sepal.Width)) + # specifying dataset and aesthetic mapping\n  geom_histogram(bins = 12) + # adding a histogram layer\n  labs(title = \"Histogram of Iris Sepal Widths\", # adding a layer with title and axis labels\n       x = \"Sepal Width (cm)\")\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Width, \n                 y = Sepal.Length)) +\n  geom_point() + # adding a scatterplot layer\n  labs(title = \"Scatterplot of Sepal Length vs Width\", \n       x = \"Sepal Width (cm)\",\n       y = \"Sepal Length (cm)\")\n\n\n\n\n\n\n\n\nLet’s further customize our ggplots.\n\nGrouping\nWe can group our histogram by species - the legend is automatically added!\n\nggplot(iris, \n       aes(x = Sepal.Width, fill = Species)) + \n  geom_histogram(bins = 12,\n                 # alpha controls transparency\n                 alpha = 0.8) + \n  labs(title = \"Histogram of Sepal Widths\", \n       x = \"Sepal Width (cm)\", \n       y = \"Frequency\") + \n  # you can specify your own colors for each group\n  scale_fill_manual(values = c(\"darkgreen\", \n                               \"forestgreen\", \n                               \"darkolivegreen\"))\n\n\n\n\n\n\n\n\nThe same grouping can be done for scatterplots - you can even change the shapes of groups (uncomment line 4).\n\nggplot(iris, \n       aes(x = Sepal.Width, \n           y = Sepal.Length, \n           color = Species)) + \n  geom_point() + \n  labs(title = \"Sepal Lengths vs Sepal Widths\", \n       x = \"Sepal Width\", \n       y = \"Sepal Length\") +\n  scale_color_manual(values = c(\"darkgreen\", \n                               \"forestgreen\", \n                               \"darkolivegreen\"))\n\n\n\n\n\n\n\n\nInstead of overlaying groups on top of each other, we can also use facet_wrapping.\n\nggplot(iris, \n       aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + \n  geom_point() + \n  labs(title = \"Sepal Lengths vs Sepal Widths\", \n       x = \"Sepal Width\", \n       y = \"Sepal Length\") +\n  # wrap by Species\n  facet_wrap(~Species)\n\n\n\n\n\n\n\n\n\n\nOther ways to customize your ggplot\nYou can alter the “theme” of your ggplot by adding theme_*() as a layer. Try changing theme_gray() (the default) in line 7 to one of theme_bw(), theme_dark(), theme_minimal(), or theme_classic().\nAlso try changing the value of the shape parameter in geom_point() in line 3. It can be any integer ranging from 0 to 25 (see shape options here).\n\nggplot(iris, aes(x = Sepal.Width, \n                 y = Sepal.Length)) +\n  geom_point(shape=20) + \n  labs(title = \"Scatterplot of Sepal Length vs Width\", \n       x = \"Sepal Width (cm)\",\n       y = \"Sepal Length (cm)\") + \n  theme_gray()\n\n\n\n\n\n\n\n\nYou can add labels to your plots using geom_label().\n\nggplot(iris, aes(x = Sepal.Width, \n                 y = Sepal.Length)) +\n  geom_point() + # adding a scatterplot layer\n  labs(title = \"Scatterplot of Sepal Length vs Width\", \n       x = \"Sepal Width (cm)\",\n       y = \"Sepal Length (cm)\") + \n  geom_label(label = \"Look at this!\", \n             x = 4.0,\n             y = 6.5,\n             color = \"black\",\n             fill = \"#69b3a2\"\n  )\n\n\n\n\n\n\n\n\nYou can use point sizes in scatterplots to represent the magnitude of a variable. To do this, simply specify the size parameter in the aesthetic mapping.\nNotice how the below plot incorporates four variables!\n\nggplot(iris, aes(x = Sepal.Width, \n                 y = Sepal.Length,\n                 size = Petal.Width,\n                 color = Species)) +\n  geom_point(alpha = 0.6) + \n  labs(title = \"Scatterplot of Sepal Length vs Width\", \n       x = \"Sepal Width (cm)\",\n       y = \"Sepal Length (cm)\") + \n  theme_gray()"
  }
]