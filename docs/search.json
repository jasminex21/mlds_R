[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Overview",
    "text": "Overview\n\n\n\nWelcome! Today, we will explore the basics of R programming and dive into data visualization using ggplot2, one of the most popular packages for creating graphics in R.\nR is widely used for data analysis and visualization in various fields, including academia, industry, and research. Its applications range from simple data manipulation to complex statistical modeling and machine learning."
  },
  {
    "objectID": "index.html#basics",
    "href": "index.html#basics",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Basics",
    "text": "Basics\n\nAssignment\nThe assignment operator in R is &lt;-. You can also use the equals sign =.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Types\n\nCharacter: Used for text data, enclosed within either single or double quotation marks, e.g. “Hello”, “40 Acres’\nNumeric: integers and floats. e.g. 12, 3.14, -7.\nLogical: Consists of boolean values TRUE and FALSE.\nVectors: A sequence of elements of the same data type.\n\nUse c() to concatenate items into a vector.\n\nNumeric vector: c(1, 2, 3, 4, 5)\nCharacter vector: c(\"apple\", \"banana\", \"orange\")\nLogical vector: c(TRUE, FALSE, TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMath\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (remainder from division)\nx %% y\n\n\n% / %\nInteger division\nx% / %y\n\n\n\nSome example calculations:\n\n\n\n\n\n\n\n\nOther useful functions for computations include log() for logarithms and sqrt() for square roots.\nBase R also comes with several useful functions for statistical analyses, including mean(), median(), and sd().\n\n\n\n\n\n\n\n\nIn some cases, you may need to deal with NA values, which indicate missing data.\nWhat happens when you run the following? What happens when you uncomment and re-run lines 5, 8, and 11?"
  },
  {
    "objectID": "index.html#data-visualization",
    "href": "index.html#data-visualization",
    "title": "Workshop: Intro to R and Data Viz. in R",
    "section": "Data Visualization",
    "text": "Data Visualization\nLet’s start playing with real data! We will be using the iris dataset, which is built into R.\nThe dataset contains 150 observations of iris flowers, each belonging to one of three species: setosa, versicolor, or virginica.\n\n\n\n\n\n\nTip\n\n\n\nBecause the iris dataset is already in R, we don’t need to load it in. If, however, you have a dataset stored locally in a CSV file, you can use data = read.csv(\"path_to_dataset.csv\") to read in your data.\n\n\nOnce a dataset is loaded into your R session, it is stored in a dataframe.\nWe can take a brief look at the first few rows of the dataset using head():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd you can also get some summary statistics about the dataset using the summary() function. Notice the difference in summary statistics between the numeric and categorical variables!\n\n\n\n\n\n\n\n\nSpecific columns in a dataframe are accessed using the $ symbol in R.\n\n\n\n\n\n\n\n\n\nBase R\nOne of R’s greatest advantages is its support for data visualization.\nWe’ll start with plotting in base R - the default plotting options built into R - and then we’ll move on to plotting with ggplot, the R package that allows users to create and customize prettier graphics.\nPlotting functions provided by base R include barplot() for barcharts, hist() for histograms, plot() for scatterplots, boxplot() for boxplots, and so on.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhile plotting in base R is fast and convenient, it is not the most visually appealing.\n\n\nggplot\nggplot is a data visualization package in R that provides a flexible and intuitive framework for creating graphics.\nBecause ggplot is not included in base R and is a separate package, it needs to be installed. In R, external packages are installed using install.packages(\"package_name\"), and then loaded into the session using library(\"package_name\")\n\n\n\n\n\n\n\n\nPlotting in ggplot follows a consistent template: you first supply the ggplot() function, in which you specify the dataset you will be using, as well as an aesthetic mapping using aes(). Then, you simply add layers onto the ggplot (using +).\nSupported plots include histogams, boxplots, scatterplots, violin plots, density plots, and tons more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry it yourself - create a ggplot scatterplot with Petal.Width on the x axis, and Petal.Length on the y axis. Double click on each blank and fill them in.\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +\n  geom_point() + \n  labs(title = \"Histogram of Petal Lengths vs Widths\", \n       x = \"Petal Width (cm)\",\n       y = \"Petal Length (cm)\")\nggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +\n  geom_point() + \n  labs(title = \"Histogram of Petal Lengths vs Widths\", \n       x = \"Petal Width (cm)\",\n       y = \"Petal Length (cm)\")\n\n\n\n\n\n\nLet’s further customize our ggplots.\n\nGrouping\nWe can group our histogram by species - the legend is automatically added!\n\n\n\n\n\n\n\n\nThe same grouping can be done for scatterplots.\n\n\n\n\n\n\n\n\nInstead of overlaying groups on top of each other, we can also use facet_wrapping."
  }
]